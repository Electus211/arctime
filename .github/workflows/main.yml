name: Arctime Auto Sign

on:
  schedule:
    - cron: '30 0 * * *'  # UTCÊó∂Èó¥0:30ÔºàÂåó‰∫¨Êó∂Èó¥8:30Ôºâ
  workflow_dispatch:

env:
  PYTHONUNBUFFERED: 1  # Á°Æ‰øùÂÆûÊó∂Êó•ÂøóËæìÂá∫

jobs:
  sign:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install requests pyopenssl

      - name: Run sign script
        id: sign
        env:
          USERNAME: ${{ secrets.USERNAME }}
          PASSWORD: ${{ secrets.PASSWORD }}
          MATL_USERNAME: ${{ secrets.MATL_USERNAME }}
          MATL_PASSWORD: ${{ secrets.MATL_PASSWORD }}
          MATL_SMTP_SERVER: ${{ secrets.MATL_SMTP_SERVER }}
          MATL_TO: ${{ secrets.MATL_TO }}
        run: |
          mkdir -p logs
          LOG_FILE="logs/arctime_$(date +%Y%m%d_%H%M%S).log"
          
          cat << 'EOF' > sign.py
          import os
          import re
          import json
          import requests
          import smtplib
          import logging
          from email.mime.text import MIMEText

          # ÈÖçÁΩÆÊó•Âøó
          logging.basicConfig(
              level=logging.INFO,
              format='%(asctime)s [%(levelname)s] %(message)s',
              handlers=[logging.StreamHandler()]
          )
          logger = logging.getLogger(__name__)

          def send_email(subject, content):
              try:
                  msg = MIMEText(content, 'plain', 'utf-8')
                  msg['Subject'] = f"[Arctime] {subject}"
                  msg['From'] = os.getenv('MATL_USERNAME')
                  msg['To'] = os.getenv('MATL_TO')
                  
                  with smtplib.SMTP(os.getenv('MATL_SMTP_SERVER'), 587, timeout=15) as s:
                      s.ehlo()
                      s.starttls()
                      s.ehlo()
                      s.login(os.getenv('MATL_USERNAME'), os.getenv('MATL_PASSWORD'))
                      s.send_message(msg)
                  return True
              except Exception as e:
                  logger.error(f"ÈÇÆ‰ª∂ÂèëÈÄÅÂ§±Ë¥•: {type(e).__name__}: {str(e)}")
                  return False

          def parse_response(text):
              try:
                  return json.loads(re.search(r'\{.*\}', text).group())
              except:
                  return {'status': 0, 'msg': 'Invalid JSON: ' + text[:100]}

          try:
              logger.info("==== ‰ªªÂä°ÂºÄÂßã ====")
              
              # 1. ÁôªÂΩï
              session = requests.Session()
              login_res = session.post(
                  "https://m.arctime.cn/home/user/login_save.html",
                  data={
                      'username': os.getenv('USERNAME'),
                      'password': os.getenv('PASSWORD'),
                      'login_type': '2'
                  },
                  verify=False,
                  timeout=15
              )
              login_data = parse_response(login_res.text)
              
              if login_data.get('status') != 1:
                  raise Exception(f"ÁôªÂΩïÂ§±Ë¥•: {login_data.get('msg')}")
              
              logger.info("‚úÖ ÁôªÂΩïÊàêÂäü")
              
              # 2. Ê£ÄÊü•Á≠æÂà∞Áä∂ÊÄÅ
              ucenter_res = session.get("https://m.arctime.cn/home/ucenter", verify=False, timeout=15)
              if "‰ªäÊó•Â∑≤Á≠æÂà∞" in ucenter_res.text:
                  logger.info("‚è≠Ô∏è ‰ªäÊó•Â∑≤Á≠æÂà∞")
                  send_email("Á≠æÂà∞Áä∂ÊÄÅ", "‰ªäÊó•Â∑≤Á≠æÂà∞ÔºåÊó†ÈúÄÈáçÂ§çÊìç‰Ωú")
                  exit(0)
              
              # 3. ÊâßË°åÁ≠æÂà∞
              sign_res = session.post(
                  "https://m.arctime.cn/api/user/sign",
                  verify=False,
                  timeout=15
              )
              sign_data = parse_response(sign_res.text)
              
              if sign_data.get('status') == 1:
                  logger.info(f"üéâ Á≠æÂà∞ÊàêÂäü: {sign_data.get('msg')}")
                  send_email("Á≠æÂà∞ÊàêÂäü", f"ÁªìÊûú: {sign_data.get('msg')}")
              else:
                  raise Exception(f"Á≠æÂà∞Â§±Ë¥•: {sign_data.get('msg')}")
                  
          except Exception as e:
              logger.error(f"üö® Á≥ªÁªüÂºÇÂ∏∏: {str(e)}")
              send_email("ÊâßË°åÂ§±Ë¥•", str(e))
              exit(1)
          finally:
              logger.info("==== ‰ªªÂä°ÁªìÊùü ====")
          EOF

          # ÊâßË°åËÑöÊú¨
          python sign.py 2>&1 | tee $LOG_FILE
          echo "log_file=$LOG_FILE" >> $GITHUB_OUTPUT

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: arctime-logs
          path: ${{ steps.sign.outputs.log_file }}
