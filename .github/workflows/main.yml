name: Arctime Auto Sign

on:
  schedule:
    - cron: '30 0 * * *'  # UTC时间0:30（北京时间8:30）
  workflow_dispatch:

jobs:
  sign:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install requests pyopenssl

      - name: Run sign script
        id: sign
        env:
          USERNAME: ${{ secrets.USERNAME }}
          PASSWORD: ${{ secrets.PASSWORD }}
          MATL_USERNAME: ${{ secrets.MATL_USERNAME }}
          MATL_PASSWORD: ${{ secrets.MATL_PASSWORD }}
          MATL_SMTP_SERVER: ${{ secrets.MATL_SMTP_SERVER }}
          MATL_TO: ${{ secrets.MATL_TO }}
        run: |
          mkdir -p logs
          LOG_FILE="logs/arctime_$(date +%Y%m%d_%H%M%S).log"
          
          python << 'EOF' | tee $LOG_FILE
          import os
          import requests
          import smtplib
          import json
          import logging
          from email.mime.text import MIMEText

          # 禁用SSL警告
          import urllib3
          urllib3.disable_warnings()

          # 日志配置
          logging.basicConfig(
              level=logging.INFO,
              format='%(asctime)s [%(levelname)s] %(message)s',
              handlers=[logging.StreamHandler()]
          )
          logger = logging.getLogger(__name__)

          def send_email(subject, content):
              try:
                  msg = MIMEText(content, 'plain', 'utf-8')
                  msg['Subject'] = f"[Arctime] {subject}"
                  msg['From'] = os.getenv('MATL_USERNAME')
                  msg['To'] = os.getenv('MATL_TO')
                  
                  # 强制SMTP协议兼容
                  with smtplib.SMTP(os.getenv('MATL_SMTP_SERVER'), 587, timeout=15) as server:
                      server.ehlo()
                      server.starttls()
                      server.ehlo()
                      server.login(os.getenv('MATL_USERNAME'), os.getenv('MATL_PASSWORD'))
                      server.send_message(msg)
                  logger.info("✅ 邮件发送成功")
                  return True
              except Exception as e:
                  logger.error(f"❌ 邮件发送失败: {type(e).__name__}: {str(e)}")
                  return False

          def safe_json_parse(text):
              try:
                  return json.loads(re.search(r'\{.*\}', text).group())
              except:
                  return {"status": 0, "msg": "Invalid JSON"}

          try:
              logger.info("==== 任务开始 ====")
              
              # Arctime登录
              session = requests.Session()
              login_res = session.post(
                  "https://m.arctime.cn/home/user/login_save.html",
                  data={
                      "username": os.getenv('USERNAME'),
                      "password": os.getenv('PASSWORD'),
                      "login_type": "2"
                  },
                  verify=False,
                  timeout=15
              )
              login_data = safe_json_parse(login_res.text)
              
              if login_data.get("status") == 1:
                  logger.info("✅ 登录成功")
                  
                  # 签到检查
                  ucenter_res = session.get("https://m.arctime.cn/home/ucenter", verify=False, timeout=15)
                  if "今日已签到" in ucenter_res.text:
                      logger.info("⏭️ 今日已签到")
                      send_email("签到状态", "今日已签到，无需重复操作")
                  else:
                      sign_res = session.post(
                          "https://m.arctime.cn/api/user/sign",
                          verify=False,
                          timeout=15
                      )
                      sign_data = safe_json_parse(sign_res.text)
                      if sign_data.get("status") == 1:
                          logger.info("🎉 签到成功")
                          send_email("签到成功", f"积分变动: {sign_data.get('msg')}")
                      else:
                          error_msg = sign_data.get("msg", sign_res.text[:200])
                          logger.error(f"❌ 签到失败: {error_msg}")
                          send_email("签到失败", f"错误信息: {error_msg}")
              else:
                  error_msg = login_data.get("msg", "未知错误")
                  logger.error(f"❌ 登录失败: {error_msg}")
                  send_email("登录失败", f"错误信息: {error_msg}")

          except Exception as e:
              logger.error(f"🚨 系统异常: {type(e).__name__}: {str(e)}")
              send_email("系统崩溃", f"严重错误: {type(e).__name__}: {str(e)}")
          finally:
              logger.info("==== 任务结束 ====")
          EOF

          echo "log_file=$LOG_FILE" >> $GITHUB_OUTPUT

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: arctime-logs
          path: ${{ steps.sign.outputs.log_file }}
