name: Arctime Auto Sign

on:
  schedule:
    - cron: '30 0 * * *'  # UTC时间每天0:30（北京时间8:30）
  workflow_dispatch:       # 允许手动触发

jobs:
  sign:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests smtplib

      - name: Verify Secrets
        run: |
          echo "===== Secrets验证 ====="
          echo "USERNAME: ${#USERNAME} chars"  # 检查长度
          echo "SMTP Server: $MATL_SMTP_SERVER"
          echo "Mail From: $MATL_USERNAME"
          echo "Mail To: $MATL_TO"
          [ -z "$USERNAME" ] && echo "❌ USERNAME为空" && exit 1
          [ -z "$MATL_PASSWORD" ] && echo "❌ MATL_PASSWORD为空" && exit 1

      - name: Run sign script
        env:
          USERNAME: ${{ secrets.USERNAME }}
          PASSWORD: ${{ secrets.PASSWORD }}
          MATL_USERNAME: ${{ secrets.MATL_USERNAME }}
          MATL_PASSWORD: ${{ secrets.MATL_PASSWORD }}
          MATL_SMTP_SERVER: ${{ secrets.MATL_SMTP_SERVER }}
          MATL_TO: ${{ secrets.MATL_TO }}
        run: |
          # 写入Python脚本
          cat << 'EOF' > arctime_auto_sign.py
          import os
          import requests
          import smtplib
          import logging
          from email.mime.text import MIMEText
          from datetime import datetime

          logging.basicConfig(
              level=logging.INFO,
              format='%(asctime)s [%(levelname)s] %(message)s',
              handlers=[logging.StreamHandler()]
          )
          logger = logging.getLogger(__name__)

          def send_email(subject, content):
              try:
                  msg = MIMEText(content, 'plain', 'utf-8')
                  msg['Subject'] = f"[Arctime] {subject}"
                  msg['From'] = os.getenv('MATL_USERNAME')
                  msg['To'] = os.getenv('MATL_TO')
                  
                  with smtplib.SMTP(os.getenv('MATL_SMTP_SERVER'), 587, timeout=10) as server:
                      server.ehlo()
                      server.starttls()
                      server.login(os.getenv('MATL_USERNAME'), os.getenv('MATL_PASSWORD'))
                      server.send_message(msg)
                  logger.info("邮件发送成功")
              except Exception as e:
                  logger.error(f"邮件发送失败: {str(e)}")

          def main():
              logger.info("==== 任务开始 ====")
              try:
                  # Arctime签到逻辑
                  session = requests.Session()
                  login_url = "https://m.arctime.cn/home/user/login_save.html"
                  payload = {
                      "username": os.getenv('USERNAME'),
                      "password": os.getenv('PASSWORD'),
                      "login_type": "2"
                  }
                  res = session.post(login_url, data=payload, verify=False, timeout=10)
                  
                  if res.json().get("status") == 1:
                      logger.info("登录成功")
                      # 检查签到状态
                      ucenter_res = session.get("https://m.arctime.cn/home/ucenter", verify=False)
                      if "今日已签到" in ucenter_res.text:
                          send_email("签到提醒", "今日已签到，无需重复操作")
                      else:
                          sign_res = session.post("https://m.arctime.cn/api/user/sign", verify=False)
                          if sign_res.json().get("status") == 1:
                              send_email("签到成功", "今日签到已完成")
                          else:
                              send_email("签到异常", f"服务器返回: {sign_res.text[:200]}")
                  else:
                      send_email("登录失败", f"错误信息: {res.json().get('msg')}")
              except Exception as e:
                  send_email("系统异常", f"执行出错: {str(e)}")
              finally:
                  logger.info("==== 任务结束 ====")

          if __name__ == "__main__":
              main()
          EOF

          # 执行脚本
          python arctime_auto_sign.py

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: sign-logs
          path: |
            *.log
